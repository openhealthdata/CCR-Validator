/*
 * Copyright 2010 OpenHealthData, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.

 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 #created on: Apr 29, 2008
package org.astm.ccr.rules.v1

#list any import classes here.
import org.openhealthdata.validation.result.ValidationResultManager;
import org.openhealthdata.validation.result.TestResultType;
import org.openhealthdata.validation.result.ErrorType;
import org.openhealthdata.validator.tree.Element;

import org.astm.ccr.ActorType;
import org.astm.ccr.CodedDescriptionType;

import java.util.List;

#declare any global variables here
global ValidationResultManager val_result;

rule "Each Actor must have a unique ActorObjectID"
@title ("Each Actor must have a unique ActorObjectID")
@testid ("c894626a-b024-4e91-a39f-0da14411cf45")
@description ("This test makes sure an ActorObjectID value is not duplicated")
@source ("E2369-05")
@profile ("E2369-05")
@author ("openhealthdata")
	when
		$a1: ActorType( $id1:actorObjectID )
		Element( object == $a1, $ord1: ordinal )
		not ( $ax:ActorType( actorObjectID == $id1 )
		      and
		      Element( object == $ax, ordinal < $ord1 ) )
		Number( $count: intValue > 1 )
		    from accumulate ( ActorType( actorObjectID == $id1 ), count() )
	then
		val_result
	    .addFailed( drools.getRule() )
	    .addFatal( "The ActorObjectID of [" + $id1 + "] is used in " +
	               $count + " <Actor> elements, but it should be unique." );
end

rule "ActorObjectID format validity"
@title ("Each Actor ActorObjectID must conform to the proper format")
@testid ("fd36743c-599a-4e94-86d6-d588449b5352")
@description ("The ID must be made up of characters in the set A-Z, a-z, 0-9, dash (-), underscore (_) and period (.). The first character must be from the set A-Z, a-z. It can be of any character length.")
@source ("E2369-05 Table A2.18")
@profile ("E2369-05")
@author ("openhealthdata")
	when
		ActorType($aid:actorObjectID not matches "[a-zA-Z]([\\w\\-_\\.])*")
	then
		val_result
	    .addFailed( drools.getRule() )
	    .addFatal( "ActorObjectID of [" + $aid + "] does not conform to the required format" );
end

rule "Valid Actor <Status> values"
@title ("Each Actor must have a unique ActorObjectID")
@testid ("77f34a4f-d8ba-47fd-a5f9-12dc114730e7")
@description ("This is a CodedDescriptionType with restricted content that must be one of the defined structured text values. Active, Prior History No Longer Active, Unknown.")
@source ("E2369-05 Table A2.18")
@profile ("E2369-05")
@author ("openhealthdata")
	when
		ActorType($s:status)
		CodedDescriptionType( this == $s, text not in ("Active", "Prior History No Longer Active", 
			"Unknown") )
	then
		val_result
	    .addFailed( drools.getRule() )
	    .addFatal(  "Actor <Status> is not one of: Active, Prior History No Longer Active, Unknown." );
end

