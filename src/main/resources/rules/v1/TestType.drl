/*
 * Copyright 2010 OpenHealthData, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.

 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 #created on: Apr 29, 2008
package org.astm.ccr.rules.v1

#list any import classes here.
import org.openhealthdata.validation.result.ValidationResultManager;
import org.openhealthdata.validation.result.TestResultType;
import org.openhealthdata.validation.result.ErrorType;

import java.util.List;
import org.astm.ccr.TestType;
import org.astm.ccr.CodedDescriptionType;

#declare any global variables here
global ValidationResultManager val_result;

rule "Test type must be one of the required string values"
@title ("Test type must be one of the required string values")
@testid ("5edefcc5-e119-41e0-a71c-97124aba7aef")
@description ("Test type must be one of the required string values: Observation, Result.")
@source ("E2369-05 Table A1.1 Page 27")
@profile ("E2369-05")
@author ("openhealthdata")
	when
		$t: TestType( $ty:type )
		CodedDescriptionType( this == $ty, $tx:text, text not in ("Observation", "Result") )
	then
		String testid = drools.getRule().getMetaAttribute("testid");
		String title = drools.getRule().getMetaAttribute("title");
		String description = drools.getRule().getMetaAttribute("description");
		String source = drools.getRule().getMetaAttribute("source");
		String profile = drools.getRule().getMetaAttribute("profile"); 
		val_result.addTest(
			testid,
			title,
			description+ " Source: "+
			source,
			TestResultType.FAILED, profile);
		ErrorType e = new ErrorType();
		e.setMessage("Test ["+$t.getCCRDataObjectID()+"] has an invalid type value ["+$tx+"]");
		e.setServerity(ErrorType.FATAL);
		val_result.addError(testid, e);
end

rule "Test status must be one of the required string values"
@title ("Test status must be one of the required string values")
@testid ("51266a92-2f9b-4ef3-a040-5f8bfa32b1ea")
@description ("Test status must be one of the required string values: Pending, In Process Preliminary Results, Final Results, Corrected Results.")
@source ("E2369-05 Table A1.1 Page 27")
@profile ("E2369-05")
@author ("openhealthdata")
	when
		$t: TestType($s:status)
		CodedDescriptionType( this == $s, $tx:text, text not in ("Pending", "In Process Preliminary Results",
			"Final Results", "Corrected Results") )
	then
		String testid = drools.getRule().getMetaAttribute("testid");
		String title = drools.getRule().getMetaAttribute("title");
		String description = drools.getRule().getMetaAttribute("description");
		String source = drools.getRule().getMetaAttribute("source");
		String profile = drools.getRule().getMetaAttribute("profile"); 
		val_result.addTest(
			testid,
			title,
			description+ " Source: "+
			source,
			TestResultType.FAILED, profile);
		ErrorType e = new ErrorType();
		e.setMessage("Test ["+$t.getCCRDataObjectID()+"] has an invalid status value ["+$tx+"]");
		e.setServerity(ErrorType.FATAL);
		val_result.addError(testid, e);
end
